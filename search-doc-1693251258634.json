[{"title":"Signal","type":0,"sectionRef":"#","url":"/signal/api/Signal","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"/signal/api/Signal#functions","content":" "},{"title":"subscribe​","type":1,"pageTitle":"Signal","url":"/signal/api/Signal#subscribe","content":"&lt;/&gt; Signal:subscribe( callback: (...any) → ()-- The callback to be invoked ) → () → ()-- A function that disconnects the callback Registers a callback to be invoked when the signal is fired.  "},{"title":"once​","type":1,"pageTitle":"Signal","url":"/signal/api/Signal#once","content":"&lt;/&gt; Signal:once( callback: (...any) → ()-- The callback to be invoked ) → () → ()-- A function that disconnects the callback Disconnects the callback after it is invoked once. This is a useful shorthand if you only need a callback to be fired once.  "},{"title":"fire​","type":1,"pageTitle":"Signal","url":"/signal/api/Signal#fire","content":"&lt;/&gt; Signal:fire(...: any) → () Invokes all currently subscribed callbacks. Note that, if a callback is subscribed mid-fire, it will not be invoked during that firing. Callbacks are invoked usingtask.spawn, so it's okay to yield inside a callback. "}]